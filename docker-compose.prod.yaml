version: '3'

volumes:
  dbdata:
    driver: local

networks:
  service:
    driver: bridge

services:
  proxy:
    build:
      context: ./proxy
      dockerfile: .deploy/prod.Dockerfile
    container_name: ${USER:-www}-proxy
    image: ${USER:-www}/proxy
    volumes:
      - ./proxy/default.prod.conf:/etc/nginx/templates/default.conf.template
    environment:
      NGINX_SERVER: ${NGINX_SERVER:-localhost}
    depends_on:
      - backend-api
      - frontend
    ports:
      - "${NGINX_PORT:-80}:80"
    networks:
      - service

  backend:
    build:
      context: ./backend
      dockerfile: .deploy/prod.Dockerfile
      args:
        BACKEND_PORT: ${BACKEND_PORT:-9000}
        USER: ${USER:-www}
    container_name: ${USER:-www}-backend
    image: ${USER:-www}/backend
    depends_on:
      - db
    networks:
      - service

  backend-api:
    build:
      context: ./backend
      dockerfile: .deploy/nginx/Dockerfile
    image: ${USER:-www}/backend-api
    container_name: ${USER:-www}-backend-api
    volumes:
      - ./backend/.deploy/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - service

  db:
    image: postgres:15-alpine3.17
    container_name: ${USER:-www}-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-laravel}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-QWEasd123@}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
    volumes:
      - dbdata:/var/lib/postgres
    networks:
      - service

  frontend:
    build:
      context: ./frontend
      dockerfile: .deploy/prod.Dockerfile
    image: ${USER:-www}/frontend
    container_name: ${USER:-www}-frontend
    restart: unless-stopped
    networks:
      - service